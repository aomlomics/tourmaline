run_name: test_data_mifish
output_dir: "../v2-results"
sample_run_name:  # if empty, will use run_name-samples/
fastq_qza_file: # if empty, will use run_name-samples/ 
sample_metadata_file: # optional if no summary plotting

# ASV STEP: Denoising and clustering, saves to [run_name]-repseqs folder
asv_method: dada2pe # dada2pe, dada2se, deblur
asv_threads: 5

# ASV METHODS
# DADA2 PAIRED-END
# For more info run: qiime dada2 denoise-paired --help

dada2pe_trunc_len_f: 0
dada2pe_trunc_len_r: 0
dada2pe_trim_left_f: 0
dada2pe_trim_left_r: 0
dada2pe_max_ee_f: 2
dada2pe_max_ee_r: 2
dada2pe_trunc_q: 2
dada2pe_pooling_method: independent
dada2pe_chimera_method: consensus
dada2pe_min_fold_parent_over_abundance: 1
dada2pe_n_reads_learn: 1000000
dada2pe_hashed_feature_ids: --p-hashed-feature-ids

# DADA2 SINGLE-END
# For more info run: qiime dada2 denoise-single --help

dada2se_trunc_len: 0
dada2se_trim_left: 0
dada2se_max_ee: 2
dada2se_trunc_q: 2
dada2se_pooling_method: independent
dada2se_chimera_method: consensus
dada2se_min_fold_parent_over_abundance: 1
dada2se_n_reads_learn: 1000000
dada2se_hashed_feature_ids: --p-hashed-feature-ids

# DEBLUR SINGLE-END
# For more info run: qiime deblur denoise-other --help

deblur_trim_length: 0
deblur_sample_stats: --p-sample-stats
deblur_mean_error: 0.005
deblur_indel_prob: 0.01
deblur_indel_max: 3
deblur_min_reads: 10
deblur_min_size: 2
deblur_hashed_feature_ids: --p-hashed-feature-ids

# FILTERING (OPTIONAL)
to_filter: False

# FILTER SAMPLES BEFORE DENOISING

samples_to_filter: # file with samples to remove prior to denoising
min_sample_reads: 0 # remove samples with fewer reads prior to denoising
# FILTER SAMPLES BY METADATA
# Samples can be removed or retained based on their metadata, using SQLite WHERE-clause syntax inside double quotes.
# TO SKIP FILTERING BY SAMPLE METADATA: provide "none" (default) or don't run filtering commands.
# EXAMPLE: "[region]='Open Water'"
metadata_filter: none

# FILTER FEATURES AFTER DENOISING
# Set minimum and maximum sequence lengths to filter representative sequences by.
# Limits are inclusive, ie, greater than or equal to minimum, less than or equal to maximum.
# For more info run: qiime feature-table filter-seqs --help
# TO SKIP FILTERING BY LENGTH: set values to extreme values, eg (0, 10000) 

repseq_min_length: 0
repseq_max_length: 0

# FILTER BY ABUNDANCE & PREVALENCE
# Set minimum abundance/prevalence limits for filtering.
# Values are floats range(0,1)
# Limit is inclusive, ie, greater than or equal to minimum. Samples with frequency of 0 after filtering will also be removed.
# For more info run: qiime feature-table filter-features-conditionally --help
# TO SKIP FILTERING BY ABUNDANCE/PREVALENCE: set values to 0 or don't run filtering commands.

repseq_min_abundance: 0
repseq_min_prevalence: 0

repseq_min_samples: 0 # remove features that are not present in at least this many samples

# Outputs (not done yet)
biom: #Boolean
qiime_artifacts: #Boolean
tsvs: #Boolean

#command: snakemake --use-conda -s repseqs_step.Snakefile --configfile config-02-repseqs.yaml --cores 4